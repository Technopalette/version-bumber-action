name: 'Automatic Version Bumper Core'
description: 'Core logic for automatically bumping version and creating tags based on PR title conventions'
inputs:
  token:
    description: 'GitHub token for pushing tags'
    required: true
  initial_version:
    description: 'Initial version from secrets'
    required: true
  force_initial:
    description: 'Force use of initial version'
    required: false
    default: 'false'
outputs:
  new_version:
    description: 'The new version number'
    value: ${{ steps.bump-version.outputs.version }}
runs:
  using: 'composite'
  steps:
    - name: Get initial version
      shell: bash
      id: initial-version
      run: |
        echo "INITIAL_VERSION=${{ inputs.initial_version }}" >> $GITHUB_ENV
        echo "Initial version set to: ${{ inputs.initial_version }}"
        
    - name: Determine version bump
      shell: bash
      id: version-bump
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        echo "PR Title: $PR_TITLE"
        
        if [[ $PR_TITLE =~ ^feat!: || $PR_TITLE =~ ^fix!: || $PR_TITLE =~ ^BREAKING[[:space:]]CHANGE ]]; then
          echo "BUMP=major" >> $GITHUB_ENV
          echo "Version bump: MAJOR"
        elif [[ $PR_TITLE =~ ^feat: ]]; then
          echo "BUMP=minor" >> $GITHUB_ENV
          echo "Version bump: MINOR"
        elif [[ $PR_TITLE =~ ^fix: ]]; then
          echo "BUMP=patch" >> $GITHUB_ENV
          echo "Version bump: PATCH"
        else
          echo "BUMP=none" >> $GITHUB_ENV
          echo "Version bump: NONE"
        fi
        
    - name: Bump version and create tag
      shell: bash
      id: bump-version
      run: |
        CURRENT_VERSION="${{ inputs.initial_version }}"
        echo "Current version: $CURRENT_VERSION"
        
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        case $BUMP in
          major) 
            NEW_VERSION="$((MAJOR + 1)).0.0"
            echo "New MAJOR version: $NEW_VERSION"
            ;;
          minor) 
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
            echo "New MINOR version: $NEW_VERSION"
            ;;
          patch) 
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
            echo "New PATCH version: $NEW_VERSION"
            ;;
          none) 
            NEW_VERSION="${CURRENT_VERSION}"
            echo "No version change: $NEW_VERSION"
            ;;
        esac
        
        echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
        
    - name: Commit and push tag
      shell: bash
      run: |
        if [ "$BUMP" != "none" ]; then
          echo "Creating and pushing tag for version: $NEW_VERSION"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create and push tag
          TAG="v${{ env.NEW_VERSION }}"
          echo "Creating tag: $TAG"
          
          git tag "$TAG"
          git push origin "$TAG"
          
          echo "Tag $TAG created and pushed successfully"
        else
          echo "No version bump required, skipping tag creation"
        fi